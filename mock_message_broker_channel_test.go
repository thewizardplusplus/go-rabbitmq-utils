// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package rabbitmqutils

import (
	amqp "github.com/streadway/amqp"
	mock "github.com/stretchr/testify/mock"
)

// MockMessageBrokerChannel is an autogenerated mock type for the MessageBrokerChannel type
type MockMessageBrokerChannel struct {
	mock.Mock
}

// Cancel provides a mock function with given fields: consumerName, noWait
func (_m *MockMessageBrokerChannel) Cancel(consumerName string, noWait bool) error {
	ret := _m.Called(consumerName, noWait)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(consumerName, noWait)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *MockMessageBrokerChannel) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Consume provides a mock function with given fields: queueName, consumerName, autoAcknowledge, exclusive, noLocal, noWait, arguments
func (_m *MockMessageBrokerChannel) Consume(queueName string, consumerName string, autoAcknowledge bool, exclusive bool, noLocal bool, noWait bool, arguments amqp.Table) (<-chan amqp.Delivery, error) {
	ret := _m.Called(queueName, consumerName, autoAcknowledge, exclusive, noLocal, noWait, arguments)

	var r0 <-chan amqp.Delivery
	if rf, ok := ret.Get(0).(func(string, string, bool, bool, bool, bool, amqp.Table) <-chan amqp.Delivery); ok {
		r0 = rf(queueName, consumerName, autoAcknowledge, exclusive, noLocal, noWait, arguments)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan amqp.Delivery)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, bool, bool, bool, bool, amqp.Table) error); ok {
		r1 = rf(queueName, consumerName, autoAcknowledge, exclusive, noLocal, noWait, arguments)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: queueName, autoAcknowledge
func (_m *MockMessageBrokerChannel) Get(queueName string, autoAcknowledge bool) (amqp.Delivery, bool, error) {
	ret := _m.Called(queueName, autoAcknowledge)

	var r0 amqp.Delivery
	if rf, ok := ret.Get(0).(func(string, bool) amqp.Delivery); ok {
		r0 = rf(queueName, autoAcknowledge)
	} else {
		r0 = ret.Get(0).(amqp.Delivery)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string, bool) bool); ok {
		r1 = rf(queueName, autoAcknowledge)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, bool) error); ok {
		r2 = rf(queueName, autoAcknowledge)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Publish provides a mock function with given fields: exchange, queueName, mandatory, immediate, message
func (_m *MockMessageBrokerChannel) Publish(exchange string, queueName string, mandatory bool, immediate bool, message amqp.Publishing) error {
	ret := _m.Called(exchange, queueName, mandatory, immediate, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, bool, bool, amqp.Publishing) error); ok {
		r0 = rf(exchange, queueName, mandatory, immediate, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Qos provides a mock function with given fields: prefetchCount, prefetchSize, global
func (_m *MockMessageBrokerChannel) Qos(prefetchCount int, prefetchSize int, global bool) error {
	ret := _m.Called(prefetchCount, prefetchSize, global)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, bool) error); ok {
		r0 = rf(prefetchCount, prefetchSize, global)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueueDeclare provides a mock function with given fields: queueName, durable, autoDelete, exclusive, noWait, arguments
func (_m *MockMessageBrokerChannel) QueueDeclare(queueName string, durable bool, autoDelete bool, exclusive bool, noWait bool, arguments amqp.Table) (amqp.Queue, error) {
	ret := _m.Called(queueName, durable, autoDelete, exclusive, noWait, arguments)

	var r0 amqp.Queue
	if rf, ok := ret.Get(0).(func(string, bool, bool, bool, bool, amqp.Table) amqp.Queue); ok {
		r0 = rf(queueName, durable, autoDelete, exclusive, noWait, arguments)
	} else {
		r0 = ret.Get(0).(amqp.Queue)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, bool, bool, bool, bool, amqp.Table) error); ok {
		r1 = rf(queueName, durable, autoDelete, exclusive, noWait, arguments)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
